In ES6, destructuring is a powerful feature that allows you to extract values from objects and arrays into individual variables or assign them to new variables. It provides a concise and convenient way to access and work with specific elements of complex data structures. Here's how you can destructure objects and arrays in ES6:

1. Destructuring Objects:

   ```javascript
   const person = {
     name: "John",
     age: 30,
     city: "New York"
   };

   // Destructuring object properties into variables
   const { name, age, city } = person;

   console.log(name); // Output: "John"
   console.log(age); // Output: 30
   console.log(city); // Output: "New York"
   ```

   In the above example, we have an object `person` with properties `name`, `age`, and `city`. By using destructuring with curly braces `{}`, we extract the values of those properties into individual variables.

2. Destructuring Arrays:

   ```javascript
   const numbers = [1, 2, 3, 4, 5];

   // Destructuring array elements into variables
   const [first, second, third] = numbers;

   console.log(first); // Output: 1
   console.log(second); // Output: 2
   console.log(third); // Output: 3
   ```

   In this example, we have an array `numbers`. By using destructuring with square brackets `[]`, we extract the elements of the array into individual variables.

3. Default Values:

   ```javascript
   const person = {
     name: "John",
     age: 30
   };

   // Destructuring object properties with default values
   const { name, age, city = "New York" } = person;

   console.log(name); // Output: "John"
   console.log(age); // Output: 30
   console.log(city); // Output: "New York" (default value)
   ```

   When destructuring objects, you can also assign default values to variables in case the corresponding property does not exist.

4. Rest Syntax:

   ```javascript
   const numbers = [1, 2, 3, 4, 5];

   // Destructuring array elements with rest syntax
   const [first, second, ...rest] = numbers;

   console.log(first); // Output: 1
   console.log(second); // Output: 2
   console.log(rest); // Output: [3, 4, 5] (array of remaining elements)
   ```

   The rest syntax (`...`) can be used in array destructuring to capture the remaining elements into a new array.

Destructuring objects and arrays can also be combined, allowing you to extract nested values or mix object and array destructuring. Additionally, you can use destructuring in function parameters to extract values directly from function arguments.

Destructuring in ES6 provides a more concise and readable syntax when working with complex data structures, making it easier to access and use specific elements of objects and arrays.
